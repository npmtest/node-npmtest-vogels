{"/home/travis/build/npmtest/node-npmtest-vogels/test.js":"/* istanbul instrument in package npmtest_vogels */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vogels/lib.npmtest_vogels.js":"/* istanbul instrument in package npmtest_vogels */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vogels = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vogels = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vogels/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vogels && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vogels */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vogels\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vogels.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_vogels.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vogels.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_vogels.__dirname + '/lib.npmtest_vogels.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/index.js":"'use strict';\n\nmodule.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/index.js":"'use strict';\n\nvar _            = require('lodash'),\n    util         = require('util'),\n    AWS          = require('aws-sdk'),\n    DocClient    = AWS.DynamoDB.DocumentClient,\n    Table        = require('./table'),\n    Schema       = require('./schema'),\n    serializer   = require('./serializer'),\n    batch        = require('./batch'),\n    Item         = require('./item'),\n    createTables = require('./createTables'),\n    bunyan       = require('bunyan');\n\nvar vogels = module.exports;\n\nvogels.AWS = AWS;\n\nvar internals = {};\n\nvogels.log = bunyan.createLogger({\n  name: 'vogels',\n  serializers : {err: bunyan.stdSerializers.err},\n  level : bunyan.FATAL\n});\n\nvogels.dynamoDriver = internals.dynamoDriver = function (driver) {\n  if(driver) {\n    internals.dynamodb = driver;\n\n    var docClient = internals.loadDocClient(driver);\n    internals.updateDynamoDBDocClientForAllModels(docClient);\n  } else {\n    internals.dynamodb = internals.dynamodb || new vogels.AWS.DynamoDB({apiVersion: '2012-08-10'});\n  }\n\n  return internals.dynamodb;\n};\n\nvogels.documentClient = internals.documentClient = function (docClient) {\n  if(docClient) {\n    internals.docClient = docClient;\n    internals.dynamodb = docClient.service;\n    internals.updateDynamoDBDocClientForAllModels(docClient);\n  } else {\n    internals.loadDocClient();\n  }\n\n  return internals.docClient;\n};\n\ninternals.updateDynamoDBDocClientForAllModels = function (docClient) {\n  _.each(vogels.models, function (model) {\n    model.config({docClient: docClient});\n  });\n};\n\ninternals.loadDocClient = function (driver) {\n  if(driver) {\n    internals.docClient = new DocClient({service : driver});\n  } else {\n    internals.docClient = internals.docClient || new DocClient({service : internals.dynamoDriver()});\n  }\n\n  return internals.docClient;\n};\n\ninternals.compileModel = function (name, schema) {\n\n  // extremly simple table names\n  var tableName = name.toLowerCase() + 's';\n\n  var log = vogels.log.child({model: name});\n\n  var table = new Table(tableName, schema, serializer, internals.loadDocClient(), log);\n\n  var Model = function (attrs) {\n    Item.call(this, attrs, table);\n  };\n\n  util.inherits(Model, Item);\n\n  Model.get          = _.bind(table.get, table);\n  Model.create       = _.bind(table.create, table);\n  Model.update       = _.bind(table.update, table);\n  Model.destroy      = _.bind(table.destroy, table);\n  Model.query        = _.bind(table.query, table);\n  Model.scan         = _.bind(table.scan, table);\n  Model.parallelScan = _.bind(table.parallelScan, table);\n\n  Model.getItems = batch(table, serializer).getItems;\n  Model.batchGetItems = batch(table, serializer).getItems;\n\n  // table ddl methods\n  Model.createTable   = _.bind(table.createTable, table);\n  Model.updateTable   = _.bind(table.updateTable, table);\n  Model.describeTable = _.bind(table.describeTable, table);\n  Model.deleteTable   = _.bind(table.deleteTable, table);\n  Model.tableName     = _.bind(table.tableName, table);\n\n  table.itemFactory = Model;\n\n  Model.log = log;\n\n  // hooks\n  Model.after  = _.bind(table.after, table);\n  Model.before = _.bind(table.before, table);\n\n  /* jshint camelcase:false */\n  Model.__defineGetter__('docClient', function(){\n    return table.docClient;\n  });\n\n  Model.config = function(config) {\n    config = config || {};\n\n    if(config.tableName) {\n      table.config.name = config.tableName;\n    }\n\n    if (config.docClient) {\n      table.docClient = config.docClient;\n    } else if (config.dynamodb) {\n      table.docClient = new DocClient({ service : config.dynamodb});\n    }\n\n    return table.config;\n  };\n\n  return vogels.model(name, Model);\n};\n\ninternals.addModel = function (name, model) {\n  vogels.models[name] = model;\n\n  return vogels.models[name];\n};\n\nvogels.reset = function () {\n  vogels.models = {};\n};\n\nvogels.Set = function () {\n  return internals.docClient.createSet.apply(internals.docClient, arguments);\n};\n\nvogels.define = function (modelName, config) {\n  if(_.isFunction(config)) {\n    throw new Error('define no longer accepts schema callback, migrate to new api');\n  }\n\n  var schema = new Schema(config);\n\n  var compiledTable = internals.compileModel(modelName, schema);\n\n  return compiledTable;\n};\n\nvogels.model = function(name, model) {\n  if(model) {\n    internals.addModel(name, model);\n  }\n\n  return vogels.models[name] || null;\n};\n\nvogels.createTables = function (options, callback) {\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  callback = callback || _.noop;\n  options = options || {};\n\n  return createTables(vogels.models, options, callback);\n};\n\nvogels.types = Schema.types;\n\nvogels.reset();\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/table.js":"'use strict';\n\nvar _            = require('lodash'),\n    Item         = require('./item'),\n    Query        = require('./query'),\n    Scan         = require('./scan'),\n    EventEmitter = require('events').EventEmitter,\n    async        = require('async'),\n    utils        = require('./utils'),\n    ParallelScan = require('./parallelScan'),\n    expressions  = require('./expressions');\n\nvar internals = {};\n\nvar Table = module.exports = function (name, schema, serializer, docClient, logger) {\n  this.config = {name : name};\n  this.schema = schema;\n  this.serializer = serializer;\n  this.docClient = docClient;\n  this.log = logger;\n\n  this._before = new EventEmitter();\n  this.before = this._before.on.bind(this._before);\n\n  this._after= new EventEmitter();\n  this.after = this._after.on.bind(this._after);\n};\n\nTable.prototype.initItem = function (attrs) {\n  var self = this;\n\n  if(self.itemFactory) {\n    return new self.itemFactory(attrs);\n  } else {\n    return new Item(attrs, self);\n  }\n};\n\nTable.prototype.tableName = function () {\n  if(this.schema.tableName) {\n    if(_.isFunction(this.schema.tableName)) {\n      return this.schema.tableName.call(this);\n    } else {\n      return this.schema.tableName;\n    }\n  } else {\n    return this.config.name;\n  }\n};\n\nTable.prototype.sendRequest = function (method, params, callback) {\n  var self = this;\n\n  var driver;\n  if (_.isFunction(self.docClient[method])) {\n    driver = self.docClient;\n  } else if (_.isFunction(self.docClient.service[method])) {\n    driver = self.docClient.service;\n  }\n\n  var startTime = Date.now();\n\n  self.log.info({params : params}, 'vogels %s request', method.toUpperCase());\n  driver[method].call(driver, params, function (err, data) {\n    var elapsed = Date.now() - startTime;\n\n    if (err) {\n      self.log.warn({err : err}, 'vogels %s error', method.toUpperCase());\n      return callback(err);\n    } else {\n      self.log.info({data : data}, 'vogels %s response - %sms', method.toUpperCase(), elapsed);\n      return callback(null, data);\n    }\n  });\n};\n\nTable.prototype.get = function (hashKey, rangeKey, options, callback) {\n  var self = this;\n\n  if (_.isPlainObject(rangeKey) && typeof options === 'function' && !callback) {\n    callback = options;\n    options = rangeKey;\n    rangeKey = null;\n  } else if (typeof rangeKey === 'function' && !callback) {\n    callback = rangeKey;\n    options = {};\n    rangeKey = null;\n  } else if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  var params = {\n    TableName : self.tableName(),\n    Key : self.serializer.buildKey(hashKey, rangeKey, self.schema)\n  };\n\n  params = _.merge({}, params, options);\n\n  self.sendRequest('get', params, function (err, data) {\n    if(err) {\n      return callback(err);\n    }\n\n    var item = null;\n    if(data.Item) {\n      item = self.initItem(self.serializer.deserializeItem(data.Item));\n    }\n\n    return callback(null, item);\n  });\n};\n\ninternals.callBeforeHooks = function (table, name, startFun, callback) {\n  var listeners = table._before.listeners(name);\n\n  return async.waterfall([startFun].concat(listeners), callback);\n};\n\nTable.prototype.create = function (item, options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  callback = callback || _.noop;\n  options = options || {};\n\n  if (_.isArray(item)) {\n    async.map(item, function (data, callback) {\n      return internals.createItem(self, data, options, callback);\n    }, callback);\n  } else {\n    return internals.createItem(self, item, options, callback);\n  }\n};\n\ninternals.createItem = function (table, item, options, callback) {\n  var self = table;\n\n  var start = function (callback) {\n    var data = self.schema.applyDefaults(item);\n\n    var paramName = _.isString(self.schema.createdAt) ? self.schema.createdAt : 'createdAt';\n\n    if(self.schema.timestamps && self.schema.createdAt !== false && !_.has(data, paramName)) {\n      data[paramName] = new Date().toISOString();\n    }\n\n    return callback(null, data);\n  };\n\n  internals.callBeforeHooks(self, 'create', start, function (err, data) {\n    if(err) {\n      return callback(err);\n    }\n\n    var result = self.schema.validate(data);\n\n    if(result.error) {\n      return callback(result.error);\n    }\n\n    var attrs = utils.omitNulls(data);\n\n    var params = {\n      TableName : self.tableName(),\n      Item : self.serializer.serializeItem(self.schema, attrs)\n    };\n\n    if (options.expected) {\n      internals.addConditionExpression(params, options.expected);\n      options = _.omit(options, 'expected');\n    }\n\n    if (options.overwrite === false) {\n      var expected = _.chain([self.schema.hashKey, self.schema.rangeKey]).compact().reduce(function (result, key) {\n        _.set(result, key + '.<>', _.get(params.Item, key));\n        return result;\n      }, {}).value();\n\n      internals.addConditionExpression(params, expected);\n    }\n\n    options = _.omit(options, 'overwrite'); // remove overwrite flag regardless if true or false\n\n    params = _.merge({}, params, options);\n\n    self.sendRequest('put', params, function (err) {\n      if(err) {\n        return callback(err);\n      }\n\n      var item = self.initItem(attrs);\n      self._after.emit('create', item);\n\n      return callback(null, item);\n    });\n  });\n};\n\ninternals.updateExpressions = function (schema, data, options) {\n  var exp = expressions.serializeUpdateExpression(schema, data);\n\n  if(options.UpdateExpression) {\n    var parsed = expressions.parse(options.UpdateExpression);\n\n    exp.expressions = _.reduce(parsed, function (result, val, key) {\n      if(!_.isEmpty(val)) {\n        result[key] = result[key].concat(val);\n      }\n\n      return result;\n    }, exp.expressions);\n  }\n\n  if(_.isPlainObject(options.ExpressionAttributeValues)) {\n    exp.values = _.merge({}, exp.values, options.ExpressionAttributeValues);\n  }\n\n  if(_.isPlainObject(options.ExpressionAttributeNames)) {\n    exp.attributeNames = _.merge({}, exp.attributeNames, options.ExpressionAttributeNames);\n  }\n\n  return _.merge({}, {\n    ExpressionAttributeValues : exp.values,\n    ExpressionAttributeNames : exp.attributeNames,\n    UpdateExpression : expressions.stringify(exp.expressions),\n  });\n};\n\nTable.prototype.update = function (item, options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  callback = callback || _.noop;\n  options = options || {};\n\n  var start = function (callback) {\n    var paramName = _.isString(self.schema.updatedAt) ? self.schema.updatedAt : 'updatedAt';\n\n    if(self.schema.timestamps && self.schema.updatedAt !== false && !_.has(item, paramName)) {\n      item[paramName] = new Date().toISOString();\n    }\n\n    return callback(null, item);\n  };\n\n  internals.callBeforeHooks(self, 'update', start, function (err, data) {\n    if(err) {\n      return callback(err);\n    }\n\n    var hashKey = data[self.schema.hashKey];\n    var rangeKey = data[self.schema.rangeKey] || null;\n\n    var params = {\n      TableName : self.tableName(),\n      Key : self.serializer.buildKey(hashKey, rangeKey, self.schema),\n      ReturnValues : 'ALL_NEW'\n    };\n\n    var exp = internals.updateExpressions(self.schema, data, options);\n\n    if(exp.UpdateExpression) {\n      params.UpdateExpression = exp.UpdateExpression;\n      delete options.UpdateExpression;\n    }\n\n    if(exp.ExpressionAttributeValues) {\n      params.ExpressionAttributeValues = exp.ExpressionAttributeValues;\n      delete options.ExpressionAttributeValues;\n    }\n\n    if(exp.ExpressionAttributeNames) {\n      params.ExpressionAttributeNames = exp.ExpressionAttributeNames;\n      delete options.ExpressionAttributeNames;\n    }\n\n    if (options.expected) {\n      internals.addConditionExpression(params, options.expected);\n      delete options.expected;\n    }\n\n    params = _.chain({}).merge(params, options).omit(_.isEmpty).value();\n\n    self.sendRequest('update', params, function (err, data) {\n      if(err) {\n        return callback(err);\n      }\n\n      var result = null;\n      if(data.Attributes) {\n        result = self.initItem(self.serializer.deserializeItem(data.Attributes));\n      }\n\n      self._after.emit('update', result);\n      return callback(null, result);\n    });\n\n  });\n};\n\ninternals.addConditionExpression = function (params, expectedConditions) {\n  _.each(expectedConditions, function (val, key) {\n    var operator;\n    var expectedValue = null;\n\n    var existingValueKeys = _.keys(params.ExpressionAttributeValues);\n\n    if (_.isObject(val) && _.isBoolean(val.Exists) && val.Exists === true) {\n      operator = 'attribute_exists';\n    } else if (_.isObject(val) && _.isBoolean(val.Exists) && val.Exists === false) {\n      operator = 'attribute_not_exists';\n    } else if (_.isObject(val) && _.has(val, '<>')) {\n      operator = '<>';\n      expectedValue = _.get(val, '<>');\n    } else {\n      operator = '=';\n      expectedValue = val;\n    }\n\n    var condition = expressions.buildFilterExpression(key, operator, existingValueKeys, expectedValue, null);\n    params.ExpressionAttributeNames  = _.merge({}, condition.attributeNames, params.ExpressionAttributeNames);\n    params.ExpressionAttributeValues = _.merge({}, condition.attributeValues, params.ExpressionAttributeValues);\n\n    if (_.isString(params.ConditionExpression )) {\n      params.ConditionExpression = params.ConditionExpression + ' AND (' + condition.statement + ')';\n    } else {\n      params.ConditionExpression = '(' + condition.statement + ')';\n    }\n  });\n};\n\nTable.prototype.destroy = function (hashKey, rangeKey, options, callback) {\n  var self = this;\n\n  if (_.isPlainObject(rangeKey) && typeof options === 'function' && !callback) {\n    callback = options;\n    options = rangeKey;\n    rangeKey = null;\n  } else if (typeof rangeKey === 'function' && !callback) {\n    callback = rangeKey;\n    options = {};\n    rangeKey = null;\n  } else if (_.isPlainObject(rangeKey) && !callback) {\n    callback = options;\n    options = rangeKey;\n    rangeKey = null;\n  } else if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  callback = callback || _.noop;\n  options = options || {};\n\n  if (_.isPlainObject(hashKey)) {\n    rangeKey = hashKey[self.schema.rangeKey] || null;\n    hashKey = hashKey[self.schema.hashKey];\n  }\n\n  var params = {\n    TableName : self.tableName(),\n    Key : self.serializer.buildKey(hashKey, rangeKey, self.schema)\n  };\n\n  if (options.expected) {\n    internals.addConditionExpression(params, options.expected);\n\n    delete options.expected;\n  }\n\n  params = _.merge({}, params, options);\n\n  self.sendRequest('delete', params, function (err, data) {\n    if(err) {\n      return callback(err);\n    }\n\n    var item = null;\n    if(data.Attributes) {\n      item = self.initItem(self.serializer.deserializeItem(data.Attributes));\n    }\n\n    self._after.emit('destroy', item);\n    return callback(null, item);\n  });\n};\n\nTable.prototype.query = function (hashKey) {\n  var self = this;\n\n  return new Query(hashKey, self, self.serializer);\n};\n\nTable.prototype.scan = function () {\n  var self = this;\n\n  return new Scan(self, self.serializer);\n};\n\nTable.prototype.parallelScan= function (totalSegments) {\n  var self = this;\n\n  return new ParallelScan(self, self.serializer, totalSegments);\n};\n\n\ninternals.deserializeItems = function (table, callback) {\n  return function (err, data) {\n    if(err) {\n      return callback(err);\n    }\n\n    var result = {};\n    if(data.Items) {\n      result.Items = _.map(data.Items, function(i) {\n        return table.initItem(table.serializer.deserializeItem(i));\n      });\n\n      delete data.Items;\n    }\n\n    if(data.LastEvaluatedKey) {\n      result.LastEvaluatedKey = data.LastEvaluatedKey;\n\n      delete data.LastEvaluatedKey;\n    }\n\n    return callback(null, _.merge({}, data, result));\n  };\n\n};\n\nTable.prototype.runQuery = function(params, callback) {\n  var self = this;\n\n  self.sendRequest('query', params, internals.deserializeItems(self, callback));\n};\n\nTable.prototype.runScan = function(params, callback) {\n  var self = this;\n\n  self.sendRequest('scan', params, internals.deserializeItems(self, callback));\n};\n\nTable.prototype.runBatchGetItems = function (params, callback) {\n\n  var self = this;\n  self.sendRequest('batchGet', params, callback);\n};\n\ninternals.attributeDefinition = function (schema, key) {\n  var type = schema._modelDatatypes[key];\n\n  if(type === 'DATE') {\n    type = 'S';\n  }\n\n  return {\n    AttributeName : key,\n    AttributeType : type\n  };\n};\n\ninternals.keySchema = function (hashKey, rangeKey) {\n  var result = [{\n    AttributeName : hashKey,\n    KeyType : 'HASH'\n  }];\n\n  if(rangeKey) {\n    result.push({\n      AttributeName : rangeKey,\n      KeyType : 'RANGE'\n    });\n  }\n\n  return result;\n};\n\ninternals.secondaryIndex = function (schema, params) {\n  var projection = params.projection || { ProjectionType : 'ALL' };\n\n  return {\n    IndexName : params.name,\n    KeySchema : internals.keySchema(schema.hashKey, params.rangeKey),\n    Projection : projection\n  };\n};\n\ninternals.globalIndex = function (indexName, params) {\n  var projection = params.projection || { ProjectionType : 'ALL' };\n\n  return {\n    IndexName : indexName,\n    KeySchema : internals.keySchema(params.hashKey, params.rangeKey),\n    Projection : projection,\n    ProvisionedThroughput: {\n      ReadCapacityUnits: params.readCapacity || 1,\n      WriteCapacityUnits: params.writeCapacity || 1\n    }\n  };\n};\n\nTable.prototype.createTable = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n  var attributeDefinitions = [];\n\n  attributeDefinitions.push(internals.attributeDefinition(self.schema, self.schema.hashKey));\n\n  if(self.schema.rangeKey) {\n    attributeDefinitions.push(internals.attributeDefinition(self.schema, self.schema.rangeKey));\n  }\n\n  var localSecondaryIndexes = [];\n\n  _.forEach(self.schema.secondaryIndexes, function (params) {\n    attributeDefinitions.push(internals.attributeDefinition(self.schema, params.rangeKey));\n    localSecondaryIndexes.push(internals.secondaryIndex(self.schema, params));\n  });\n\n  var globalSecondaryIndexes = [];\n\n  _.forEach(self.schema.globalIndexes, function (params, indexName) {\n\n    if(!_.find(attributeDefinitions, { 'AttributeName': params.hashKey })) {\n      attributeDefinitions.push(internals.attributeDefinition(self.schema, params.hashKey));\n    }\n\n    if(params.rangeKey && !_.find(attributeDefinitions, { 'AttributeName': params.rangeKey })) {\n      attributeDefinitions.push(internals.attributeDefinition(self.schema, params.rangeKey));\n    }\n\n    globalSecondaryIndexes.push(internals.globalIndex(indexName, params));\n  });\n\n  var keySchema = internals.keySchema(self.schema.hashKey, self.schema.rangeKey);\n\n  var params = {\n    AttributeDefinitions : attributeDefinitions,\n    TableName : self.tableName(),\n    KeySchema : keySchema,\n    ProvisionedThroughput : {\n      ReadCapacityUnits : options.readCapacity || 1,\n      WriteCapacityUnits : options.writeCapacity || 1\n    }\n  };\n\n  if(localSecondaryIndexes.length >= 1) {\n    params.LocalSecondaryIndexes = localSecondaryIndexes;\n  }\n\n  if(globalSecondaryIndexes.length >= 1) {\n    params.GlobalSecondaryIndexes = globalSecondaryIndexes;\n  }\n\n  self.sendRequest('createTable', params, callback);\n};\n\nTable.prototype.describeTable = function (callback) {\n\n  var params = {\n    TableName : this.tableName(),\n  };\n\n  this.sendRequest('describeTable', params, callback);\n};\n\nTable.prototype.deleteTable = function (callback) {\n  callback = callback || _.noop;\n\n  var params = {\n    TableName : this.tableName(),\n  };\n\n  this.sendRequest('deleteTable', params, callback);\n};\n\nTable.prototype.updateTable = function (throughput, callback) {\n  var self = this;\n  if (typeof throughput === 'function' && !callback) {\n    callback = throughput;\n    throughput = {};\n  }\n\n  callback = callback || _.noop;\n  throughput = throughput || {};\n\n  async.parallel([\n    async.apply(internals.syncIndexes, self),\n    async.apply(internals.updateTableCapacity, self, throughput),\n  ], callback);\n};\n\ninternals.updateTableCapacity = function (table, throughput, callback) {\n  var params = {};\n\n  if (_.has(throughput, 'readCapacity') || _.has(throughput, 'writeCapacity')) {\n    params.ProvisionedThroughput = {};\n\n    if (_.has(throughput, 'readCapacity')) {\n      params.ProvisionedThroughput.ReadCapacityUnits = throughput.readCapacity;\n    }\n\n    if (_.has(throughput, 'writeCapacity')) {\n      params.ProvisionedThroughput.WriteCapacityUnits = throughput.writeCapacity;\n    }\n  }\n\n  if (!_.isEmpty(params)) {\n    params.TableName = table.tableName();\n    table.sendRequest('updateTable', params, callback);\n  } else {\n    return callback();\n  }\n};\n\ninternals.syncIndexes = function (table, callback) {\n  callback = callback || _.noop;\n\n  table.describeTable(function (err, data) {\n    if (err) {\n      return callback(err);\n    }\n\n    var missing = _.values(internals.findMissingGlobalIndexes(table, data));\n    if (_.isEmpty(missing)) {\n      return callback();\n    }\n\n    // UpdateTable only allows one new index per UpdateTable call\n    // http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html#GSI.OnlineOps.Creating\n    var maxIndexCreationsAtaTime = 5;\n    async.mapLimit(missing, maxIndexCreationsAtaTime, function (params, callback) {\n      var attributeDefinitions = [];\n\n      if(!_.find(attributeDefinitions, { 'AttributeName': params.hashKey })) {\n        attributeDefinitions.push(internals.attributeDefinition(table.schema, params.hashKey));\n      }\n\n      if(params.rangeKey && !_.find(attributeDefinitions, { 'AttributeName': params.rangeKey })) {\n        attributeDefinitions.push(internals.attributeDefinition(table.schema, params.rangeKey));\n      }\n\n      var currentWriteThroughput = data.Table.ProvisionedThroughput.WriteCapacityUnits;\n      var newIndexWriteThroughput = _.ceil(currentWriteThroughput * 1.5);\n      params.writeCapacity = params.writeCapacity || newIndexWriteThroughput;\n\n      table.log.info('adding index %s to table %s', params.name, table.tableName());\n\n      var updateParams = {\n        TableName : table.tableName(),\n        AttributeDefinitions : attributeDefinitions,\n        GlobalSecondaryIndexUpdates : [{Create : internals.globalIndex(params.name, params)}]\n      };\n\n      table.sendRequest('updateTable', updateParams, callback);\n    }, callback);\n  });\n};\n\ninternals.findMissingGlobalIndexes = function (table, data) {\n  if(_.isNull(data) || _.isUndefined(data)) {\n    // table does not exist \n    return table.schema.globalIndexes;\n  } else {\n    var indexData = _.get(data, 'Table.GlobalSecondaryIndexes');\n    var existingIndexNames = _.pluck(indexData, 'IndexName');\n\n    var missing = _.reduce(table.schema.globalIndexes, function (result, idx, indexName) {\n    if (!_.includes(existingIndexNames, idx.name)) {\n        result[indexName] = idx;\n    }\n\n    return result;\n    }, {});\n\n    return missing;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/item.js":"'use strict';\n\nvar util = require('util'),\n    _    = require('lodash'),\n    events = require('events');\n\nvar internals = {};\n\ninternals.identity = function () {};\n\nvar Item = module.exports = function (attrs, table) {\n  events.EventEmitter.call(this);\n\n  this.table = table;\n\n  this.set(attrs || {});\n};\n\nutil.inherits(Item, events.EventEmitter);\n\nItem.prototype.get = function (key) {\n  if(key) {\n    return this.attrs[key];\n  } else {\n    return this.attrs;\n  }\n};\n\nItem.prototype.set = function (params) {\n  this.attrs = _.merge({}, this.attrs, params);\n\n  return this;\n};\n\nItem.prototype.save = function (callback) {\n  var self = this;\n  callback = callback || internals.identity;\n\n  self.table.create(this.attrs, function (err, item) {\n    if(err) {\n      return callback(err);\n    }\n\n    self.set(item.attrs);\n\n    return callback(null, item);\n  });\n};\n\nItem.prototype.update = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  callback = callback || internals.identity;\n\n  self.table.update(this.attrs, options, function (err, item) {\n    if(err) {\n      return callback(err);\n    }\n\n    if(item) {\n      self.set(item.attrs);\n    }\n\n    return callback(null, item);\n  });\n};\n\nItem.prototype.destroy = function (options, callback) {\n  var self = this;\n\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  callback = callback || internals.identity;\n\n  self.table.destroy(this.attrs, options, callback);\n};\n\nItem.prototype.toJSON = function() {\n  return _.cloneDeep(this.attrs);\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/query.js":"'use strict';\n\nvar _           = require('lodash'),\n    expressions = require('./expressions'),\n    utils       = require('./utils');\n\nvar internals = {};\n\ninternals.keyCondition = function (keyName, schema, query) {\n\n  var f = function (operator) {\n    return function (/*values*/) {\n      var copy = [].slice.call(arguments);\n      var existingValueKeys = _.keys(query.request.ExpressionAttributeValues);\n      var args = [keyName, operator, existingValueKeys].concat(copy);\n      var cond = expressions.buildFilterExpression.apply(null, args);\n      return query.addKeyCondition(cond);\n    };\n  };\n\n  return {\n    equals      : f('='),\n    eq          : f('='),\n    lte         : f('<='),\n    lt          : f('<'),\n    gte         : f('>='),\n    gt          : f('>'),\n    beginsWith  : f('begins_with'),\n    between     : f('BETWEEN')\n  };\n};\n\ninternals.queryFilter = function (keyName, schema, query) {\n\n  var f = function (operator) {\n    return function (/*values*/) {\n      var copy = [].slice.call(arguments);\n      var existingValueKeys = _.keys(query.request.ExpressionAttributeValues);\n      var args = [keyName, operator, existingValueKeys].concat(copy);\n      var cond = expressions.buildFilterExpression.apply(null, args);\n      return query.addFilterCondition(cond);\n    };\n  };\n\n  return {\n    equals      : f('='),\n    eq          : f('='),\n    ne          : f('<>'),\n    lte         : f('<='),\n    lt          : f('<'),\n    gte         : f('>='),\n    gt          : f('>'),\n    null        : f('attribute_not_exists'),\n    exists      : f('attribute_exists'),\n    contains    : f('contains'),\n    notContains : f('NOT contains'),\n    in          : f('IN'),\n    beginsWith  : f('begins_with'),\n    between     : f('BETWEEN')\n  };\n};\n\ninternals.isUsingGlobalIndex = function (query) {\n  return query.request.IndexName && query.table.schema.globalIndexes[query.request.IndexName];\n};\n\nvar Query = module.exports = function (hashKey, table, serializer) {\n  this.hashKey = hashKey;\n  this.table = table;\n  this.serializer = serializer;\n\n  this.options = {loadAll: false};\n  this.request = {};\n};\n\nQuery.prototype.limit = function(num) {\n  if(num <= 0 ) {\n    throw new Error('Limit must be greater than 0');\n  }\n\n  this.request.Limit = num;\n\n  return this;\n};\n\nQuery.prototype.filterExpression = function(expression) {\n  this.request.FilterExpression = expression;\n\n  return this;\n};\n\nQuery.prototype.expressionAttributeValues = function(data) {\n  this.request.ExpressionAttributeValues = data;\n\n  return this;\n};\n\nQuery.prototype.expressionAttributeNames = function(data) {\n  this.request.ExpressionAttributeNames = data;\n\n  return this;\n};\n\nQuery.prototype.projectionExpression = function(data) {\n  this.request.ProjectionExpression = data;\n\n  return this;\n};\n\nQuery.prototype.usingIndex = function (name) {\n  this.request.IndexName = name;\n\n  return this;\n};\n\nQuery.prototype.consistentRead = function (read) {\n  if(!_.isBoolean(read)) {\n    read = true;\n  }\n\n  this.request.ConsistentRead = read;\n\n  return this;\n};\n\ninternals.addExpressionAttributes = function (request, condition) {\n  var expressionAttributeNames  = _.merge({}, condition.attributeNames, request.ExpressionAttributeNames);\n  var expressionAttributeValues = _.merge({}, condition.attributeValues, request.ExpressionAttributeValues);\n\n  if (!_.isEmpty(expressionAttributeNames)) {\n    request.ExpressionAttributeNames = expressionAttributeNames;\n  }\n\n  if (!_.isEmpty(expressionAttributeValues)) {\n    request.ExpressionAttributeValues = expressionAttributeValues;\n  }\n};\n\nQuery.prototype.addKeyCondition = function (condition) {\n  internals.addExpressionAttributes(this.request, condition);\n\n  if (_.isString(this.request.KeyConditionExpression )) {\n    this.request.KeyConditionExpression = this.request.KeyConditionExpression + ' AND (' + condition.statement + ')';\n  } else {\n    this.request.KeyConditionExpression = '(' + condition.statement + ')';\n  }\n\n  return this;\n};\n\nQuery.prototype.addFilterCondition = function (condition) {\n  internals.addExpressionAttributes(this.request, condition);\n\n  if (_.isString(this.request.FilterExpression )) {\n    this.request.FilterExpression = this.request.FilterExpression + ' AND (' + condition.statement + ')';\n  } else {\n    this.request.FilterExpression = '(' + condition.statement + ')';\n  }\n\n  return this;\n};\n\nQuery.prototype.startKey = function (hashKey, rangeKey) {\n  this.request.ExclusiveStartKey = this.serializer.buildKey(hashKey, rangeKey, this.table.schema);\n\n  return this;\n};\n\nQuery.prototype.attributes = function(attrs) {\n  if(!_.isArray(attrs)) {\n    attrs = [attrs];\n  }\n\n  var expressionAttributeNames = _.reduce(attrs, function (result, attr) {\n    var path = '#' + attr;\n    result[path] = attr;\n\n    return result;\n  }, {});\n\n  this.request.ProjectionExpression = _.keys(expressionAttributeNames).join(',');\n  this.request.ExpressionAttributeNames = _.merge({}, expressionAttributeNames, this.request.ExpressionAttributeNames);\n\n  return this;\n};\n\nQuery.prototype.ascending = function () {\n  this.request.ScanIndexForward = true;\n\n  return this;\n};\n\nQuery.prototype.descending = function () {\n  this.request.ScanIndexForward = false;\n\n  return this;\n};\n\nQuery.prototype.select = function (value) {\n  this.request.Select = value;\n\n  return this;\n};\n\nQuery.prototype.returnConsumedCapacity = function (value) {\n  if(_.isUndefined(value)) {\n    value = 'TOTAL';\n  }\n\n  this.request.ReturnConsumedCapacity = value;\n\n  return this;\n};\n\nQuery.prototype.loadAll = function () {\n  this.options.loadAll = true;\n\n  return this;\n};\n\nQuery.prototype.where = function (keyName) {\n  return internals.keyCondition(keyName, this.table.schema, this);\n};\n\nQuery.prototype.filter = function (keyName) {\n  return internals.queryFilter(keyName, this.table.schema, this);\n};\n\nQuery.prototype.exec = function(callback) {\n  var self = this;\n\n  this.addKeyCondition(this.buildKey());\n\n  var runQuery = function (params, callback) {\n    self.table.runQuery(params, callback);\n  };\n\n  return utils.paginatedRequest(self, runQuery, callback);\n};\n\nQuery.prototype.buildKey = function () {\n  var key = this.table.schema.hashKey;\n\n  if(internals.isUsingGlobalIndex(this)) {\n    key = this.table.schema.globalIndexes[this.request.IndexName].hashKey;\n  }\n\n  var existingValueKeys = _.keys(this.request.ExpressionAttributeValues);\n  return expressions.buildFilterExpression(key, '=', existingValueKeys, this.hashKey);\n};\n\ninternals.formatAttributeValue = function (val) {\n  if(_.isDate(val)) {\n    return val.toISOString();\n  }\n\n  return val;\n};\n\nQuery.prototype.buildRequest = function () {\n  return _.merge({}, this.request, {TableName: this.table.tableName()});\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/expressions.js":"'use strict';\n\nvar _ = require('lodash'),\n    utils = require('./utils'),\n    serializer = require('./serializer');\n\nvar internals = {};\n\ninternals.actionWords = ['SET', 'ADD', 'REMOVE', 'DELETE'];\n\ninternals.regexMap = _.reduce(internals.actionWords, function (result, key) {\n  result[key] = new RegExp(key + '\\\\s*(.+?)\\\\s*(SET|ADD|REMOVE|DELETE|$)');\n  return result;\n}, {});\n\n// explanation http://stackoverflow.com/questions/3428618/regex-to-find-commas-that-arent-inside-and\ninternals.splitOperandsRegex = new RegExp(/\\s*(?![^(]*\\)),\\s*/);\n\ninternals.match = function (actionWord, str) {\n  var match = internals.regexMap[actionWord].exec(str);\n\n  if(match && match.length >= 2) {\n    return match[1].split(internals.splitOperandsRegex);\n  } else {\n    return null;\n  }\n};\n\nexports.parse = function (str) {\n  return _.reduce(internals.actionWords, function (result, actionWord) {\n    result[actionWord] = internals.match(actionWord, str);\n    return result;\n  }, {});\n};\n\nexports.serializeUpdateExpression = function (schema, item) {\n  var datatypes = schema._modelDatatypes;\n\n  var data = utils.omitPrimaryKeys(schema, item);\n\n  var memo = {\n    expressions : {},\n    attributeNames : {},\n    values : {},\n  };\n\n  memo.expressions = _.reduce(internals.actionWords, function (result, key) {\n    result[key] = [];\n\n    return result;\n  }, {});\n\n  var result = _.reduce(data, function (result, value, key) {\n    var valueKey = ':' + key;\n    var nameKey = '#' + key;\n\n    if(_.isNull(value) || (_.isString(value) && _.isEmpty(value)) ) {\n      result.expressions.REMOVE.push(nameKey);\n      result.attributeNames[nameKey] = key;\n    } else if (_.isPlainObject(value) && value.$add) {\n      result.expressions.ADD.push(nameKey + ' ' + valueKey);\n      result.values[valueKey] = serializer.serializeAttribute(value.$add, datatypes[key]);\n      result.attributeNames[nameKey] = key;\n    } else if (_.isPlainObject(value) && value.$del) {\n      result.expressions.DELETE.push(nameKey + ' ' + valueKey);\n      result.values[valueKey] = serializer.serializeAttribute(value.$del, datatypes[key]);\n      result.attributeNames[nameKey] = key;\n    } else {\n      result.expressions.SET.push(nameKey + ' = ' + valueKey);\n      result.values[valueKey] = serializer.serializeAttribute(value, datatypes[key]);\n      result.attributeNames[nameKey] = key;\n    }\n\n    return result;\n  }, memo);\n\n  return result;\n};\n\nexports.stringify = function (expressions) {\n  return _.reduce(expressions, function (result, value, key) {\n    if(!_.isEmpty(value)) {\n      if(_.isArray(value)) {\n        result.push(key + ' ' + value.join(', '));\n      } else {\n        result.push(key + ' ' + value);\n      }\n    }\n\n    return result;\n  }, []).join(' ');\n};\n\ninternals.formatAttributeValue = function (val) {\n  if(_.isDate(val)) {\n    return val.toISOString();\n  }\n\n  return val;\n};\n\ninternals.isFunctionOperator = function (operator) {\n  return _.includes(['attribute_exists',\n                     'attribute_not_exists',\n                     'attribute_type',\n                     'begins_with',\n                     'contains',\n                     'NOT contains',\n                     'size'], operator);\n};\n\ninternals.uniqAttributeValueName = function(key, existingValueNames) {\n  var potentialName = ':' + key;\n  var idx = 1;\n\n  while(_.includes(existingValueNames, potentialName)) {\n    idx++;\n    potentialName = ':' + key + '_' + idx;\n  }\n\n  return potentialName;\n};\n\nexports.buildFilterExpression = function (key, operator, existingValueNames, val1, val2 ) {\n  // IN filter expression is unlike all the others where val1 is an array of values\n  if (operator === 'IN') {\n    return internals.buildInFilterExpression(key, existingValueNames, val1);\n  }\n\n  var v1 = internals.formatAttributeValue(val1);\n  var v2 = internals.formatAttributeValue(val2);\n\n  if (operator === 'attribute_exists' && v1 === false) {\n    operator = 'attribute_not_exists';\n    v1 = null;\n  } else if (operator === 'attribute_exists' && v1 === true) {\n    v1 = null;\n  }\n\n  var path = '#' + key;\n  var v1ValueName = internals.uniqAttributeValueName(key, existingValueNames);\n  var v2ValueName = internals.uniqAttributeValueName(key, [v1ValueName].concat(existingValueNames));\n\n  var statement = '';\n\n  if (internals.isFunctionOperator(operator)) {\n    if (!_.isNull(v1) && !_.isUndefined(v1)) {\n      statement = operator + '(' + path + ', ' + v1ValueName + ')';\n    } else {\n      statement = operator + '(' + path + ')';\n    }\n  } else if (operator === 'BETWEEN') {\n    statement = path + ' BETWEEN ' + v1ValueName + ' AND ' + v2ValueName;\n  } else {\n    statement = [path, operator, v1ValueName].join(' ');\n  }\n\n  var attributeValues = {};\n\n  if (!_.isNull(v1) && !_.isUndefined(v1)) {\n    attributeValues[v1ValueName] = v1;\n  }\n\n  if (!_.isNull(v2) && !_.isUndefined(v2)) {\n    attributeValues[v2ValueName] = v2;\n  }\n\n  var attributeNames = {};\n  attributeNames[path] = key;\n\n  return {\n    attributeNames : attributeNames,\n    statement : statement,\n    attributeValues : attributeValues \n  };\n};\n\ninternals.buildInFilterExpression = function (key, existingValueNames, values) {\n  var path = '#' + key;\n\n  var attributeNames = {};\n  attributeNames[path] = key;\n\n  var attributeValues = _.reduce(values, function(result, val) {\n    var existing = _.keys(result).concat(existingValueNames);\n    var p = internals.uniqAttributeValueName(key, existing);\n    result[p] = internals.formatAttributeValue(val);\n    return result;\n  }, {});\n\n  return {\n    attributeNames : attributeNames,\n    statement : path + ' IN (' + _.keys(attributeValues) + ')',\n    attributeValues : attributeValues\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/utils.js":"'use strict';\n\nvar _        = require('lodash'),\n    Readable = require('stream').Readable,\n    async    = require('async'),\n    AWS      = require('aws-sdk');\n\nvar utils = module.exports;\n\nutils.omitNulls = function (data) {\n  return _.omit(data, function(value) {\n    return _.isNull(value) ||\n      _.isUndefined(value) ||\n      (_.isArray(value) && _.isEmpty(value)) ||\n      (_.isString(value) && _.isEmpty(value));\n  });\n};\n\nutils.mergeResults = function (responses, tableName) {\n  var result = {\n    Items : [],\n    ConsumedCapacity : {\n      CapacityUnits : 0,\n      TableName : tableName\n    },\n    Count : 0,\n    ScannedCount : 0\n  };\n\n  var merged = _.reduce(responses, function (memo, resp) {\n    if(!resp) {\n      return memo;\n    }\n\n    memo.Count += resp.Count || 0;\n    memo.ScannedCount += resp.ScannedCount || 0;\n\n    if(resp.ConsumedCapacity) {\n      memo.ConsumedCapacity.CapacityUnits += resp.ConsumedCapacity.CapacityUnits || 0;\n    }\n\n    if(resp.Items) {\n      memo.Items = memo.Items.concat(resp.Items);\n    }\n\n    if(resp.LastEvaluatedKey) {\n      memo.LastEvaluatedKey = resp.LastEvaluatedKey;\n    }\n\n    return memo;\n  }, result);\n\n  if(merged.ConsumedCapacity.CapacityUnits === 0) {\n    delete merged.ConsumedCapacity;\n  }\n\n  if(merged.ScannedCount === 0) {\n    delete merged.ScannedCount;\n  }\n\n  return merged;\n};\n\nutils.paginatedRequest = function (self, runRequestFunc, callback) {\n  // if callback isn't passed switch to stream\n  if(!callback) {\n    return utils.streamRequest(self, runRequestFunc);\n  }\n\n  var lastEvaluatedKey = null;\n  var responses = [];\n  var retry = false;\n\n  var doFunc = function (callback) {\n    if(lastEvaluatedKey) {\n      self.startKey(lastEvaluatedKey);\n    }\n\n    runRequestFunc(self.buildRequest(), function (err, resp) {\n      if(err && err.retryable) {\n        retry = true;\n        return setImmediate(callback);\n      } else if(err) {\n        retry = false;\n        return setImmediate(callback, err);\n      }\n\n      retry = false;\n      lastEvaluatedKey = resp.LastEvaluatedKey;\n\n      responses.push(resp);\n\n      return setImmediate(callback);\n    });\n  };\n\n  var testFunc = function () {\n    return (self.options.loadAll && lastEvaluatedKey) || retry;\n  };\n\n  var resulsFunc = function (err) {\n    if(err) {\n      return callback(err);\n    }\n\n    return callback(null, utils.mergeResults(responses, self.table.tableName()));\n  };\n\n  async.doWhilst(doFunc, testFunc, resulsFunc);\n};\n\n\nutils.streamRequest = function (self, runRequestFunc) {\n  var lastEvaluatedKey = null;\n  var performRequest = true;\n\n  var stream = new Readable({objectMode: true});\n\n  var startRead = function () {\n    if(!performRequest) {\n      return;\n    }\n\n    if(lastEvaluatedKey) {\n      self.startKey(lastEvaluatedKey);\n    }\n\n    runRequestFunc(self.buildRequest(), function (err, resp) {\n      if(err && err.retryable) {\n        return setTimeout(startRead, 1000);\n      } else if(err) {\n        return stream.emit('error', err);\n      } else {\n        lastEvaluatedKey = resp.LastEvaluatedKey;\n\n        if(!self.options.loadAll || !lastEvaluatedKey) {\n          performRequest = false;\n        }\n\n        stream.push(resp);\n\n        if(!self.options.loadAll || !lastEvaluatedKey) {\n          stream.push(null);\n        }\n      }\n\n    });\n  };\n\n  stream._read = function () {\n    startRead();\n  };\n\n  return stream;\n};\n\nutils.omitPrimaryKeys = function (schema, params) {\n  return _.omit(params, schema.hashKey, schema.rangeKey);\n};\n\nutils.strToBin = function (value) {\n  if (typeof(value) !== 'string') {\n    var StrConversionError = 'Need to pass in string primitive to be converted to binary.';\n    throw new Error(StrConversionError);\n  }\n\n  if (AWS.util.isBrowser()) {\n    var len = value.length;\n    var bin = new Uint8Array(new ArrayBuffer(len));\n    for (var i = 0; i < len; i++) {\n      bin[i] = value.charCodeAt(i);\n    }\n    return bin;\n  } else {\n    return AWS.util.Buffer(value);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/serializer.js":"'use strict';\n\nvar _     = require('lodash'),\n    utils = require('./utils'),\n    AWS   = require('aws-sdk');\n\nvar serializer = module.exports;\n\nvar internals = {};\n\ninternals.docClient = new AWS.DynamoDB.DocumentClient();\n\ninternals.createSet = function(value) {\n  if(_.isArray(value) ) {\n    return internals.docClient.createSet(value);\n  } else {\n    return internals.docClient.createSet([value]);\n  }\n};\n\nvar serialize = internals.serialize = {\n\n  binary: function (value) {\n    if(_.isString(value)) {\n      return utils.strToBin(value);\n    }\n\n    return value;\n  },\n\n  date : function (value) {\n    if(_.isDate(value)) {\n      return value.toISOString();\n    } else {\n      return new Date(value).toISOString();\n    }\n  },\n\n  boolean : function (value) {\n    if (value && value !== 'false') {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  stringSet : function (value) {\n    return internals.createSet(value, 'S');\n  },\n\n  numberSet : function (value) {\n    return internals.createSet(value, 'N');\n  },\n\n  binarySet : function (value) {\n    var bins = value;\n    if(!_.isArray(value)) {\n      bins = [value];\n    }\n\n    var vals = _.map(bins, serialize.binary);\n    return internals.createSet(vals, 'B');\n  }\n};\n\ninternals.deserializeAttribute = function (value) {\n  if(_.isObject(value) && _.isFunction(value.detectType) && _.isArray(value.values)) {\n    // value is a Set object from document client \n    return value.values;\n  } else {\n    return value;\n  }\n};\n\ninternals.serializeAttribute = serializer.serializeAttribute = function (value, type, options) {\n  if(!type) { // if type is unknown, possibly because its an dynamic key return given value\n    return value;\n  }\n\n  if(_.isNull(value)) {\n    return null;\n  }\n\n  options = options || {};\n\n  switch(type){\n  case 'DATE':\n    return serialize.date(value);\n  case 'BOOL':\n    return serialize.boolean(value);\n  case 'B':\n    return serialize.binary(value);\n  case 'NS':\n    return serialize.numberSet(value);\n  case 'SS':\n    return serialize.stringSet(value);\n  case 'BS':\n    return serialize.binarySet(value);\n  default:\n    return value;\n  }\n};\n\nserializer.buildKey = function (hashKey, rangeKey, schema) {\n  var obj = {};\n\n  if(_.isPlainObject(hashKey)) {\n    obj[schema.hashKey] = hashKey[schema.hashKey];\n\n    if(schema.rangeKey && !_.isNull(hashKey[schema.rangeKey]) && !_.isUndefined(hashKey[schema.rangeKey])) {\n      obj[schema.rangeKey] = hashKey[schema.rangeKey];\n    }\n    _.each(schema.globalIndexes, function (keys) {\n      if(_.has(hashKey, keys.hashKey)){\n        obj[keys.hashKey] = hashKey[keys.hashKey];\n      }\n\n      if(_.has(hashKey, keys.rangeKey)){\n        obj[keys.rangeKey] = hashKey[keys.rangeKey];\n      }\n    });\n\n    _.each(schema.secondaryIndexes, function (keys) {\n      if(_.has(hashKey, keys.rangeKey)){\n        obj[keys.rangeKey] = hashKey[keys.rangeKey];\n      }\n    });\n\n  } else {\n    obj[schema.hashKey] = hashKey;\n\n    if(schema.rangeKey && !_.isNull(rangeKey) && !_.isUndefined(rangeKey)) {\n      obj[schema.rangeKey] = rangeKey;\n    }\n  }\n\n  return serializer.serializeItem(schema, obj);\n};\n\nserializer.serializeItem = function (schema, item, options) {\n  options = options || {};\n\n  var serialize = function (item, datatypes) {\n    datatypes = datatypes || {};\n\n    if(!item) {\n      return null;\n    }\n\n    return _.reduce(item, function (result, val, key) {\n      if(options.expected && _.isObject(val) && _.isBoolean(val.Exists)) {\n        result[key] = val;\n        return result;\n      }\n\n      if(_.isPlainObject(val)) {\n        result[key] = serialize(val, datatypes[key]);\n        return result;\n      }\n\n      var attr = internals.serializeAttribute(val, datatypes[key], options);\n\n      if(!_.isNull(attr) || options.returnNulls) {\n        if(options.expected) {\n          result[key] = {'Value' : attr};\n        } else {\n          result[key] = attr;\n        }\n      }\n\n      return result;\n    }, {});\n  };\n\n  return serialize(item, schema._modelDatatypes);\n};\n\nserializer.serializeItemForUpdate = function (schema, action, item) {\n  var datatypes = schema._modelDatatypes;\n\n  var data = utils.omitPrimaryKeys(schema, item);\n  return _.reduce(data, function (result, value, key) {\n    if(_.isNull(value)) {\n      result[key] = {Action : 'DELETE'};\n    } else if (_.isPlainObject(value) && value.$add) {\n      result[key] = {Action : 'ADD', Value: internals.serializeAttribute(value.$add, datatypes[key])};\n    } else if (_.isPlainObject(value) && value.$del) {\n      result[key] = {Action : 'DELETE', Value: internals.serializeAttribute(value.$del, datatypes[key])};\n    } else {\n      result[key] =  {Action : action, Value: internals.serializeAttribute(value, datatypes[key])};\n    }\n\n    return result;\n  }, {});\n};\n\nserializer.deserializeItem = function (item) {\n\n  if(_.isNull(item)) {\n    return null;\n  }\n\n  var formatter = function (data) {\n    var map = _.mapValues;\n\n    if(_.isArray(data)) {\n      map = _.map;\n    }\n\n    return map(data, function(value) {\n      var result;\n\n      if(_.isPlainObject(value)) {\n        result = formatter(value);\n      } else if(_.isArray(value)) {\n        result = formatter(value);\n      } else {\n        result = internals.deserializeAttribute(value);\n      }\n\n      return result;\n    });\n  };\n\n  return formatter(item);\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/scan.js":"'use strict';\n\nvar _           = require('lodash'),\n    expressions = require('./expressions'),\n    utils       = require('./utils');\n\nvar internals = {};\n\ninternals.keyCondition = function (keyName, schema, scan) {\n\n  var f = function (operator) {\n    return function (/*values*/) {\n      var copy = [].slice.call(arguments);\n      var existingValueKeys = _.keys(scan.request.ExpressionAttributeValues);\n      var args = [keyName, operator, existingValueKeys].concat(copy);\n      var cond = expressions.buildFilterExpression.apply(null, args);\n      return scan.addFilterCondition(cond);\n    };\n  };\n\n  return {\n    equals      : f('='),\n    eq          : f('='),\n    ne          : f('<>'),\n    lte         : f('<='),\n    lt          : f('<'),\n    gte         : f('>='),\n    gt          : f('>'),\n    null        : f('attribute_not_exists'),\n    notNull     : f('attribute_exists'),\n    contains    : f('contains'),\n    notContains : f('NOT contains'),\n    in          : f('IN'),\n    beginsWith  : f('begins_with'),\n    between     : f('BETWEEN')\n  };\n};\n\nvar Scan = module.exports = function (table, serializer) {\n  this.table = table;\n  this.serializer = serializer;\n  this.options = {loadAll: false};\n\n  this.request = {};\n};\n\nScan.prototype.limit = function(num) {\n  if(num <= 0 ) {\n    throw new Error('Limit must be greater than 0');\n  }\n\n  this.request.Limit = num;\n\n  return this;\n};\n\nScan.prototype.addFilterCondition = function (condition) {\n  var expressionAttributeNames  = _.merge({}, condition.attributeNames, this.request.ExpressionAttributeNames);\n  var expressionAttributeValues = _.merge({}, condition.attributeValues, this.request.ExpressionAttributeValues);\n\n  if (!_.isEmpty(expressionAttributeNames)) {\n    this.request.ExpressionAttributeNames = expressionAttributeNames;\n  }\n\n  if (!_.isEmpty(expressionAttributeValues)) {\n    this.request.ExpressionAttributeValues = expressionAttributeValues;\n  }\n\n  if (_.isString(this.request.FilterExpression )) {\n    this.request.FilterExpression = this.request.FilterExpression + ' AND (' + condition.statement + ')';\n  } else {\n    this.request.FilterExpression = '(' + condition.statement + ')';\n  }\n\n  return this;\n};\n\nScan.prototype.startKey = function (hashKey, rangeKey) {\n  this.request.ExclusiveStartKey = this.serializer.buildKey(hashKey, rangeKey, this.table.schema);\n\n  return this;\n};\n\nScan.prototype.attributes = function(attrs) {\n  if(!_.isArray(attrs)) {\n    attrs = [attrs];\n  }\n\n  var expressionAttributeNames = _.reduce(attrs, function (result, attr) {\n    var path = '#' + attr;\n    result[path] = attr;\n\n    return result;\n  }, {});\n\n  this.request.ProjectionExpression = _.keys(expressionAttributeNames).join(',');\n  this.request.ExpressionAttributeNames = _.merge({}, expressionAttributeNames, this.request.ExpressionAttributeNames);\n\n  return this;\n};\n\nScan.prototype.select = function (value) {\n  this.request.Select = value;\n\n  return this;\n};\n\nScan.prototype.returnConsumedCapacity = function (value) {\n  if(_.isUndefined(value)) {\n    value = 'TOTAL';\n  }\n\n  this.request.ReturnConsumedCapacity = value;\n\n  return this;\n};\n\nScan.prototype.segments = function (segment, totalSegments) {\n  this.request.Segment = segment;\n  this.request.TotalSegments = totalSegments;\n\n  return this;\n};\n\n\nScan.prototype.where = function (keyName) {\n  return internals.keyCondition(keyName, this.table.schema, this);\n};\n\n\nScan.prototype.filterExpression = function(expression) {\n  this.request.FilterExpression = expression;\n\n  return this;\n};\n\nScan.prototype.expressionAttributeValues = function(data) {\n  this.request.ExpressionAttributeValues = data;\n\n  return this;\n};\n\nScan.prototype.expressionAttributeNames = function(data) {\n  this.request.ExpressionAttributeNames = data;\n\n  return this;\n};\n\nScan.prototype.projectionExpression = function(data) {\n  this.request.ProjectionExpression = data;\n\n  return this;\n};\n\nScan.prototype.exec = function(callback) {\n  var self = this;\n\n  var runScan = function (params, callback) {\n    self.table.runScan(params, callback);\n  };\n\n  return utils.paginatedRequest(self, runScan, callback);\n};\n\nScan.prototype.loadAll = function () {\n  this.options.loadAll = true;\n\n  return this;\n};\n\nScan.prototype.buildRequest = function () {\n  return _.merge({}, this.request, {TableName: this.table.tableName()});\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/parallelScan.js":"'use strict';\n\nvar Scan     = require('./scan'),\n    async    = require('async'),\n    NodeUtil = require('util'),\n    utils    = require('./utils'),\n    Readable = require('stream').Readable,\n    _        = require('lodash');\n\nvar ParallelScan = module.exports = function (table, serializer, totalSegments) {\n  Scan.call(this, table, serializer);\n\n  this.totalSegments = totalSegments;\n};\n\nNodeUtil.inherits(ParallelScan, Scan);\n\nParallelScan.prototype.exec = function (callback) {\n  var self = this;\n\n  var streamMode = false;\n  var combinedStream = new Readable({objectMode: true});\n\n  if(!callback) {\n    streamMode = true;\n    callback = function (err) {\n      if(err) {\n        combinedStream.emit('error', err);\n      }\n    };\n  }\n\n  var scanFuncs = [];\n  _.times(self.totalSegments, function(segment) {\n    var scn = new Scan(self.table, self.serializer);\n    scn.request = _.cloneDeep(self.request);\n\n    scn = scn.segments(segment, self.totalSegments).loadAll();\n\n    var scanFunc = function (callback) {\n      if(streamMode) {\n        var stream = scn.exec();\n\n        stream.on('error', callback);\n\n        stream.on('readable', function () {\n          var data = stream.read();\n          if(data) {\n            combinedStream.push(data);\n          }\n        });\n\n        stream.on('end', callback);\n\n      } else {\n        return scn.exec(callback);\n      }\n    };\n\n    scanFuncs.push(scanFunc);\n  });\n\n  var started = false;\n  var startScans = function () {\n    if(started) {\n      return;\n    }\n\n    started = true;\n\n    async.parallel(scanFuncs, function (err, responses) {\n      if(err) {\n        return callback(err);\n      }\n\n      combinedStream.push(null);\n      return callback(null, utils.mergeResults(responses, self.table.tableName()));\n    });\n  };\n\n  if(streamMode) {\n    combinedStream._read = startScans;\n  } else {\n    startScans();\n  }\n\n  return combinedStream;\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/schema.js":"'use strict';\n\nvar Joi      = require('joi'),\n    nodeUUID = require('node-uuid'),\n    _        = require('lodash');\n\nvar internals =  {};\n\ninternals.secondaryIndexSchema = Joi.object().keys({\n  hashKey : Joi.string().when('type', { is: 'local', then: Joi.ref('$hashKey'), otherwise : Joi.required()}),\n  rangeKey: Joi.string().when('type', { is: 'local', then: Joi.required(), otherwise: Joi.optional() }),\n  type : Joi.string().valid('local', 'global').required(),\n  name : Joi.string().required(),\n  projection : Joi.object(),\n  readCapacity : Joi.number().when('type', { is: 'global', then: Joi.optional(), otherwise : Joi.forbidden()}),\n  writeCapacity : Joi.number().when('type', { is: 'global', then: Joi.optional(), otherwise : Joi.forbidden()})\n});\n\ninternals.configSchema = Joi.object().keys({\n  hashKey   : Joi.string().required(),\n  rangeKey  : Joi.string(),\n  tableName : Joi.alternatives().try(Joi.string(), Joi.func()),\n  indexes   : Joi.array().includes(internals.secondaryIndexSchema),\n  schema    : Joi.object(),\n  timestamps : Joi.boolean().default(false),\n  createdAt  : Joi.alternatives().try(Joi.string(), Joi.boolean()),\n  updatedAt  : Joi.alternatives().try(Joi.string(), Joi.boolean())\n}).required();\n\ninternals.wireType = function (key) {\n  switch (key) {\n    case 'string':\n      return 'S';\n    case 'date':\n      return 'DATE';\n    case 'number':\n      return 'N';\n    case 'boolean':\n      return 'BOOL';\n    case 'binary':\n      return 'B';\n    case 'array':\n      return 'L';\n    default:\n      return null;\n  }\n};\n\ninternals.findDynamoTypeMetadata = function (data) {\n  var meta = _.find(data.meta, function (data) {\n    return _.isString(data.dynamoType);\n  });\n\n  if(meta) {\n    return meta.dynamoType;\n  } else {\n    return internals.wireType(data.type);\n  }\n};\n\ninternals.parseDynamoTypes = function (data) {\n  if(_.isPlainObject(data) && data.type === 'object' && _.isPlainObject(data.children)) {\n    return internals.parseDynamoTypes(data.children);\n  }\n\n  var mapped = _.reduce(data, function(result, val, key) {\n    if(val.type === 'object' && _.isPlainObject(val.children)) {\n      result[key] = internals.parseDynamoTypes(val.children);\n    } else {\n      result[key] = internals.findDynamoTypeMetadata(val);\n    }\n\n    return result;\n  }, {});\n\n  return mapped;\n};\n\nvar Schema = module.exports = function (config) {\n  this.secondaryIndexes = {};\n  this.globalIndexes = {};\n\n  var context = {hashKey : config.hashKey};\n\n  var self = this;\n  Joi.validate(config, internals.configSchema, { context: context }, function (err, data) {\n    if(err) {\n      var msg = 'Invalid table schema, check your config ';\n      throw new Error(msg + err.annotate());\n    }\n\n    self.hashKey    = data.hashKey;\n    self.rangeKey   = data.rangeKey;\n    self.tableName  = data.tableName;\n    self.timestamps = data.timestamps;\n    self.createdAt  = data.createdAt;\n    self.updatedAt  = data.updatedAt;\n\n    if(data.indexes) {\n      self.globalIndexes    = _.chain(data.indexes).filter({ type: 'global' }).indexBy('name').value();\n      self.secondaryIndexes = _.chain(data.indexes).filter({ type: 'local' }).indexBy('name').value();\n    }\n\n    if(data.schema) {\n      self._modelSchema    = _.isPlainObject(data.schema) ? Joi.object().keys(data.schema) : data.schema;\n    } else {\n      self._modelSchema = Joi.object();\n    }\n\n    if(self.timestamps) {\n      var valids = {};\n      var createdAtParamName = 'createdAt';\n      var updatedAtParamName = 'updatedAt';\n\n      if(self.createdAt) {\n        if(_.isString(self.createdAt)) {\n          createdAtParamName = self.createdAt;\n        }\n      }\n\n      if(self.updatedAt) {\n        if(_.isString(self.updatedAt)) {\n          updatedAtParamName = self.updatedAt;\n        }\n      }\n\n      if(self.createdAt !== false) {\n        valids[createdAtParamName] = Joi.date();\n      }\n\n      if(self.updatedAt !== false) {\n        valids[updatedAtParamName] = Joi.date();\n      }\n\n      var extended = self._modelSchema.keys(valids);\n\n      self._modelSchema = extended;\n    }\n\n    self._modelDatatypes = internals.parseDynamoTypes(self._modelSchema.describe());\n  });\n};\n\nSchema.types = {};\n\nSchema.types.stringSet = function () {\n  var set = Joi.array().includes(Joi.string()).meta({dynamoType : 'SS'});\n\n  return set;\n};\n\nSchema.types.numberSet = function () {\n  var set = Joi.array().includes(Joi.number()).meta({dynamoType : 'NS'});\n  return set;\n};\n\nSchema.types.binarySet = function () {\n  var set = Joi.array().includes(Joi.binary(), Joi.string()).meta({dynamoType : 'BS'});\n  return set;\n};\n\nSchema.types.uuid = function () {\n  return Joi.string().guid().default(nodeUUID.v4);\n};\n\nSchema.types.timeUUID = function () {\n  return Joi.string().guid().default(nodeUUID.v1);\n};\n\nSchema.prototype.validate = function (params, options) {\n  options = options || {};\n\n  return Joi.validate(params, this._modelSchema, options);\n};\n\ninternals.invokeDefaultFunctions = function (data) {\n  return _.mapValues(data, function (val) {\n    if(_.isFunction(val)) {\n      return val.call(null);\n    } else if (_.isPlainObject(val)) {\n      return internals.invokeDefaultFunctions(val);\n    } else {\n      return val;\n    }\n  });\n};\n\nSchema.prototype.applyDefaults = function (data) {\n  var result = this.validate(data, {abortEarly : false});\n\n  return internals.invokeDefaultFunctions(result.value);\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/batch.js":"'use strict';\n\nvar _ = require('lodash'),\n    async = require('async');\n\nvar internals = {};\n\ninternals.buildInitialGetItemsRequest = function (tableName, keys, options) {\n  var request = {};\n\n  request[tableName] = _.merge({}, {Keys : keys}, options);\n\n  return { RequestItems : request };\n};\n\ninternals.serializeKeys = function (keys, table, serializer) {\n  return keys.map(function (key) {\n    return serializer.buildKey(key, null, table.schema);\n  });\n};\n\ninternals.mergeResponses = function (tableName, responses) {\n  var base = {\n    Responses : {},\n    ConsumedCapacity : []\n  };\n\n  base.Responses[tableName] = [];\n\n  return responses.reduce(function (memo, resp) {\n    if(resp.Responses && resp.Responses[tableName]) {\n      memo.Responses[tableName] = memo.Responses[tableName].concat(resp.Responses[tableName]);\n    }\n\n    return memo;\n  }, base);\n};\n\ninternals.paginatedRequest = function (request, table, callback) {\n  var responses = [];\n\n  var doFunc = function (callback) {\n\n    table.runBatchGetItems(request, function (err, resp) {\n      if(err && err.retryable) {\n        return callback();\n      } else if(err) {\n        return callback(err);\n      }\n\n      request = resp.UnprocessedKeys;\n      responses.push(resp);\n\n      return callback();\n    });\n  };\n\n  var testFunc = function () {\n    return request !== null && !_.isEmpty(request);\n  };\n\n  var resulsFunc = function (err) {\n    if(err) {\n      return callback(err);\n    }\n\n    callback(null, internals.mergeResponses(table.tableName(), responses));\n  };\n\n  async.doWhilst(doFunc, testFunc, resulsFunc);\n};\n\ninternals.buckets = function (keys) {\n  var buckets = [];\n\n  while( keys.length ) {\n    buckets.push( keys.splice(0, 100) );\n  }\n\n  return buckets;\n};\n\ninternals.initialBatchGetItems = function (keys, table, serializer, options, callback) {\n  var serializedKeys = internals.serializeKeys(keys, table, serializer);\n\n  var request = internals.buildInitialGetItemsRequest(table.tableName(), serializedKeys, options);\n\n  internals.paginatedRequest(request, table, function (err, data) {\n    if(err) {\n      return callback(err);\n    }\n\n    var dynamoItems = data.Responses[table.tableName()];\n\n    var items = _.map(dynamoItems, function(i) {\n      return table.initItem(serializer.deserializeItem(i));\n    });\n\n    return callback(null, items);\n  });\n};\n\ninternals.getItems = function (table, serializer) {\n\n  return function (keys, options, callback) {\n\n    if (typeof options === 'function' && !callback) {\n      callback = options;\n      options = {};\n    }\n\n    async.map(internals.buckets(_.clone(keys)), function (key, callback) {\n      internals.initialBatchGetItems(key, table, serializer, options, callback);\n    }, function (err, results) {\n      if(err) {\n        return callback(err);\n      }\n\n      return callback(null, _.flatten(results));\n    });\n  };\n\n};\n\nmodule.exports = function (table, serializer) {\n\n  return {\n    getItems : internals.getItems(table, serializer)\n  };\n\n};\n","/home/travis/build/npmtest/node-npmtest-vogels/node_modules/vogels/lib/createTables.js":"'use strict';\n\nvar async = require('async'),\n    _     = require('lodash');\n\nvar internals = {};\n\ninternals.createTable = function (model, options, callback) {\n  options = options || {};\n\n  var tableName = model.tableName();\n\n  model.describeTable(function (err, data) {\n    if(_.isNull(data) || _.isUndefined(data)) {\n      model.log.info('creating table: %s', tableName);\n      return model.createTable(options, function (error) {\n\n        if(error) {\n          model.log.warn({err : error}, 'failed to create table %s: %s', tableName, error);\n          return callback(error);\n        }\n\n        model.log.info('waiting for table: %s to become ACTIVE', tableName);\n        internals.waitTillActive(model, callback);\n      });\n    } else {\n      model.updateTable(function (err) {\n        if(err) {\n          model.log.warn({err : err}, 'failed to update table %s: %s', tableName, err);\n          return callback(err);\n        }\n\n        model.log.info('waiting for table: %s to become ACTIVE', tableName);\n        internals.waitTillActive(model, callback);\n      });\n    }\n  });\n};\n\ninternals.waitTillActive = function (model, callback) {\n  var status = 'PENDING';\n\n  async.doWhilst(\n    function (callback) {\n    model.describeTable(function (err, data) {\n      if(err) {\n        return callback(err);\n      }\n\n      status = data.Table.TableStatus;\n\n      setTimeout(callback, 1000);\n    });\n  },\n  function () { return status !== 'ACTIVE'; },\n  function (err) {\n    return callback(err);\n  });\n};\n\nmodule.exports = function (models, config, callback) {\n  async.eachSeries(_.keys(models), function (key, callback) {\n    return internals.createTable(models[key], config[key], callback);\n  }, callback);\n};\n"}